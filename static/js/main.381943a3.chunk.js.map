{"version":3,"sources":["interfaces/global.types.ts","util/EthereumUnitConverter.ts","hooks/useEtherUnitConverter.ts","UnitInput.tsx","Body.tsx","Button.tsx","Header.tsx","hooks/useToggleConverterPanel.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["EtherUnits","BigNumber","config","ROUNDING_MODE","ROUND_DOWN","EthereumUnitConverter","value","defaultUnit","units","this","GWEI","wei","key","WEI","kwei","KWEI","mwei","MWEI","gwei","microether","MICROETHER","milliether","MILLIETHER","ether","ETHER","init","from","to","multipliedBy","dividedBy","toString","getConvertedValue","getEtherUnits","useEtherUnitConverter","useState","activeUnit","setActiveUnit","etherUnitConverter","defaults","conversionData","setConversionData","handleEtherConverter","e","inputValue","Number","isInteger","target","valueAsNumber","handleActiveUnit","unit","isActiveUnit","UnitInput","unitName","unitDetails","htmlFor","className","id","type","placeholder","onFocus","onChange","Body","Object","entries","map","Button","text","props","Header","React","memo","handleConversionsPanel","onClick","useToggleConversionsPanel","initialCondition","showConversionsPanel","setShowConversionsPanel","useCallback","isVisible","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.381943a3.chunk.js","sourcesContent":["export type EtherUnitDetails = { key: EtherUnits; value: string };\n\nexport enum EtherUnits {\n  WEI = 1,\n  KWEI = 1000,\n  MWEI = 1000000,\n  GWEI = 1000000000,\n  MICROETHER = 1000000000000,\n  MILLIETHER = 1000000000000000,\n  ETHER = 1000000000000000000,\n}\n","import BigNumber from 'bignumber.js';\nimport { EtherUnitDetails, EtherUnits } from '../interfaces/global.types';\nBigNumber.config({ ROUNDING_MODE: BigNumber.ROUND_DOWN });\n\nclass EthereumUnitConverter {\n  value: number | string;\n  defaultUnit: EtherUnits;\n  units: Record<string, EtherUnitDetails>;\n\n  constructor() {\n    this.defaultUnit = EtherUnits.GWEI;\n    this.value = 1;\n    this.units = {\n      wei: { key: EtherUnits.WEI, value: '0' },\n      kwei: { key: EtherUnits.KWEI, value: '0' },\n      mwei: { key: EtherUnits.MWEI, value: '0' },\n      gwei: { key: EtherUnits.GWEI, value: '0' },\n      microether: { key: EtherUnits.MICROETHER, value: '0' },\n      milliether: { key: EtherUnits.MILLIETHER, value: '0' },\n      ether: { key: EtherUnits.ETHER, value: '0' },\n    };\n    this.init();\n  }\n\n  get defaults() {\n    return this.units;\n  }\n\n  private getConvertedValue(value: number, from: number, to: number) {\n    return new BigNumber(value)\n      .multipliedBy(new BigNumber(from))\n      .dividedBy(new BigNumber(to))\n      .toString(10);\n  }\n\n  getEtherUnits(value: number, from: number, to: number) {\n    this.units.wei.value = this.getConvertedValue(value, from, EtherUnits.WEI);\n\n    this.units.kwei.value = this.getConvertedValue(\n      value,\n      from,\n      EtherUnits.KWEI\n    );\n    this.units.mwei.value = this.getConvertedValue(\n      value,\n      from,\n      EtherUnits.MWEI\n    );\n    this.units.gwei.value = this.getConvertedValue(\n      value,\n      from,\n      EtherUnits.GWEI\n    );\n    this.units.microether.value = this.getConvertedValue(\n      value,\n      from,\n      EtherUnits.MICROETHER\n    );\n    this.units.milliether.value = this.getConvertedValue(\n      value,\n      from,\n      EtherUnits.MILLIETHER\n    );\n    this.units.ether.value = this.getConvertedValue(\n      value,\n      from,\n      EtherUnits.ETHER\n    );\n    return this.units;\n  }\n\n  get wei() {\n    return this.units.wei;\n  }\n\n  get kwei() {\n    return this.units.kwei;\n  }\n\n  get mwei() {\n    return this.units.mwei;\n  }\n\n  get gwei() {\n    return this.units.gwei;\n  }\n\n  get microether() {\n    return this.units.microether;\n  }\n\n  get milliether() {\n    return this.units.milliether;\n  }\n\n  get ether() {\n    return this.units.ether;\n  }\n\n  private init() {\n    return this.getEtherUnits(1, EtherUnits.GWEI, EtherUnits.ETHER);\n  }\n}\n\nexport default EthereumUnitConverter;\n","import { useState } from 'react';\nimport { EtherUnits } from '../interfaces/global.types';\nimport EthereumUnitConverter from '../util/EthereumUnitConverter';\n\nconst useEtherUnitConverter = () => {\n  const [activeUnit, setActiveUnit] = useState(EtherUnits.GWEI);\n  const etherUnitConverter = new EthereumUnitConverter();\n  const [conversionData, setConversionData] = useState(\n    etherUnitConverter.defaults\n  );\n\n  const isActiveUnit = (unit: EtherUnits) => unit === activeUnit;\n\n  const handleEtherConverter = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const inputValue = Number.isInteger(e.target.valueAsNumber)\n      ? e.target.valueAsNumber\n      : 0;\n    setConversionData({\n      ...etherUnitConverter.getEtherUnits(\n        inputValue,\n        activeUnit,\n        EtherUnits.ETHER\n      ),\n    });\n  };\n\n  const handleActiveUnit = (unit: EtherUnits) => {\n    setActiveUnit(unit);\n  };\n\n  return {\n    conversionData,\n    handleEtherConverter,\n    handleActiveUnit,\n    isActiveUnit,\n  };\n};\n\nexport default useEtherUnitConverter;\n","import { HTMLProps } from 'react';\nimport { EtherUnitDetails } from './interfaces/global.types';\n\ninterface IUnitInput extends HTMLProps<HTMLDivElement> {\n  unitName: string;\n  unitDetails: EtherUnitDetails;\n  handleEtherConverter: any;\n  handleActiveUnit: any;\n  isActiveUnit: any;\n}\n\nconst UnitInput = ({\n  unitName,\n  unitDetails,\n  handleEtherConverter,\n  handleActiveUnit,\n  isActiveUnit,\n}: IUnitInput) => {\n  const inputValue =\n    unitDetails.value === '0' && isActiveUnit(unitDetails.key)\n      ? ''\n      : unitDetails.value;\n  return (\n    <label htmlFor={unitName} className=\"input-wrapper\">\n      {unitName}\n      <input\n        id={unitName}\n        type=\"number\"\n        className=\"input-field\"\n        placeholder={unitDetails.value}\n        onFocus={() => handleActiveUnit(unitDetails.key)}\n        onChange={(e) => {\n          handleEtherConverter(e);\n        }}\n        value={inputValue}\n      />\n    </label>\n  );\n};\nexport default UnitInput;\n","import useEtherUnitConverter from './hooks/useEtherUnitConverter';\nimport { EtherUnitDetails } from './interfaces/global.types';\nimport UnitInput from './UnitInput';\n\nconst Body = () => {\n  const {\n    conversionData,\n    handleEtherConverter,\n    handleActiveUnit,\n    isActiveUnit,\n  } = useEtherUnitConverter();\n  return (\n    <main className=\"main-content\">\n      {Object.entries(conversionData).map(\n        ([unitName, unitDetails]: [\n          unitName: string,\n          unitDetails: EtherUnitDetails\n        ]) => (\n          <UnitInput\n            key={unitName}\n            unitName={unitName}\n            unitDetails={unitDetails}\n            isActiveUnit={isActiveUnit}\n            handleActiveUnit={handleActiveUnit}\n            handleEtherConverter={handleEtherConverter}\n          />\n        )\n      )}\n    </main>\n  );\n};\n\nexport default Body;\n","interface IButton extends React.HTMLAttributes<HTMLButtonElement> {\n  text: string;\n}\n\nconst Button = ({ text, ...props }: IButton) => {\n  return <button {...props}>{text}</button>;\n};\n\nexport default Button;\n","import React, { HTMLProps } from 'react';\nimport Button from './Button';\n\ninterface IHeader extends HTMLProps<HTMLDivElement> {\n  handleConversionsPanel: (isVisible: boolean) => void;\n}\n\nconst Header = React.memo(({ handleConversionsPanel }: IHeader) => {\n  return (\n    <header className=\"header\">\n      <Button\n        className=\"c-button\"\n        onClick={() => handleConversionsPanel(true)}\n        text=\"show panel\"\n      />\n      <Button\n        className=\"c-button\"\n        onClick={() => handleConversionsPanel(false)}\n        text=\"hide panel\"\n      />\n    </header>\n  );\n});\n\nexport default Header;\n","import React from 'react';\n\nconst useToggleConversionsPanel = (initialCondition: boolean) => {\n  const [showConversionsPanel, setShowConversionsPanel] =\n    React.useState(initialCondition);\n  const handleConversionsPanel = React.useCallback((isVisible: boolean) => {\n    setShowConversionsPanel(isVisible);\n  }, []);\n\n  return { showConversionsPanel, handleConversionsPanel };\n};\n\nexport default useToggleConversionsPanel;\n","import './App.css';\n\nimport Body from './Body';\nimport Header from './Header';\nimport useToggleConversionsPanel from './hooks/useToggleConverterPanel';\n\nfunction App() {\n  const { showConversionsPanel, handleConversionsPanel } =\n    useToggleConversionsPanel(false);\n\n  return (\n    <div className=\"app-body\">\n      <div className=\"panel-wrapper\">\n        <Header handleConversionsPanel={handleConversionsPanel} />\n        {showConversionsPanel && <Body />}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}